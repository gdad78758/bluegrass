# GitHub Pages deployment workflow
name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["butler-gh-pages"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git diff comparisons
        
      - name: Download previous deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: ./previous-deployment
        continue-on-error: true
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install Python dependencies for GenList.py
          pip install first
          # Install chordpro via cpanm and genpdf-butler
          sudo apt-get update
          sudo apt-get install -y cpanminus build-essential libpod-parser-perl
          sudo cpanm --notest App::Music::ChordPro
          pipx install genpdf-butler
          
      - name: Build package
        run: |
          cd genpdf_package
          python -m build
          
      - name: Generate PDFs from .chopro files
        run: |
          # Debug: Show git log and current state
          echo "=== Git Debug Info ==="
          git log --oneline -5
          echo "Current HEAD: $(git rev-parse HEAD)"
          echo "=== End Debug ==="
          
          # Get list of changed .chopro files in this push/commit
          # Try multiple approaches to find changed files
          changed_chopro_files=""
          
          # Method 1: Compare with previous commit
          if [ "${{ github.event_name }}" = "push" ]; then
            changed_chopro_files=$(git diff --name-only HEAD~1 HEAD 2>/dev/null | grep '\.chopro$' || echo "")
            echo "Method 1 (HEAD~1): $changed_chopro_files"
          fi
          
          # Method 2: Use GitHub context (pushed commits)
          if [ -z "$changed_chopro_files" ] && [ "${{ github.event_name }}" = "push" ]; then
            changed_chopro_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} 2>/dev/null | grep '\.chopro$' || echo "")
            echo "Method 2 (GitHub context): $changed_chopro_files"
          fi
          
          # Method 3: Fallback - check recent changes
          if [ -z "$changed_chopro_files" ]; then
            changed_chopro_files=$(git diff --name-only HEAD~10 HEAD 2>/dev/null | grep '\.chopro$' || echo "")
            echo "Method 3 (recent changes): $changed_chopro_files"
          fi
          
          # Get untracked .chopro files
          new_chopro_files=$(git ls-files --others --exclude-standard 2>/dev/null | grep '\.chopro$' || echo "")
          
          echo "=== Final Results ==="
          echo "Changed .chopro files: '$changed_chopro_files'"
          echo "New .chopro files: '$new_chopro_files'"
          echo "==================="
          
          # Find all .chopro files that need PDF updates
          find . -name "*.chopro" -type f | while read -r file; do
            # Get the corresponding PDF filename
            pdf_file="${file%.chopro}.pdf"
            file_relative="${file#./}"
            
            # Check if PDF doesn't exist
            if [ ! -f "$pdf_file" ]; then
              echo "Generating PDF for: $file (PDF missing)"
              genpdf --pagesize a5 "$file"
            # Check if .chopro file has been changed in git
            elif echo "$changed_chopro_files" | grep -q "$file_relative" || echo "$new_chopro_files" | grep -q "$file_relative"; then
              echo "Generating PDF for: $file (chopro file changed in git)"
              genpdf --pagesize a5 "$file"
            else
              echo "Skipping $file (PDF up to date)"
            fi
          done
          
      - name: Generate HTML files
        run: |
          python3 scripts/GenList.py --no-intro notes/set_list GeneratedNotesList.html
          python3 scripts/GenList.py --no-intro music GeneratedSongsList.html
          python3 scripts/GenList.py --no-intro Christmas Christmas.html
          python3 ./scripts/GenList.py --no-intro 'Katy Lesson' KatyLessons.html
          
      - name: Generate documentation
        run: |
          mkdir -p docs
          # Copy generated HTML and PDF files to docs directory for publishing
          cp *.html docs/ 2>/dev/null || true
          # Copy all .chopro files
          find . -name "*.chopro" -type f | while read -r file; do
            # Create directory structure in docs to match source
            dir_path=$(dirname "$file")
            mkdir -p "docs/$dir_path"
            cp "$file" "docs/$file"
          done
          
          # First, copy any existing PDFs from previous deployment
          if [ -d "./previous-deployment" ]; then
            echo "Restoring PDFs from previous deployment..."
            find ./previous-deployment -name "*.pdf" -type f | while read -r file; do
              # Get relative path and copy to docs
              rel_path="${file#./previous-deployment/}"
              dir_path=$(dirname "$rel_path")
              mkdir -p "docs/$dir_path"
              cp "$file" "docs/$rel_path"
              echo "Restored: $rel_path"
            done
          fi
          
          # Then copy/overwrite with PDFs from repo (including newly generated ones)
          find . -name "*.pdf" -type f | while read -r file; do
            # Skip the previous-deployment directory
            if [[ "$file" == "./previous-deployment/"* ]]; then
              continue
            fi
            # Create directory structure in docs to match source
            dir_path=$(dirname "$file")
            mkdir -p "docs/$dir_path"
            cp "$file" "docs/$file"
          done
          # Copy image files (jpeg, jpg, png, gif, etc.)
          find . -name "*.jpeg" -o -name "*.jpg" -o -name "*.png" -o -name "*.gif" -o -name "*.webp" | while read -r file; do
            # Create directory structure in docs to match source
            dir_path=$(dirname "$file")
            mkdir -p "docs/$dir_path"
            cp "$file" "docs/$file"
          done
          # Copy CSS files and wp-content directory structure
          if [ -d "wp-content" ]; then
            cp -r wp-content docs/
          fi
          if [ -d "wp-includes" ]; then
            cp -r wp-includes docs/
          fi
          # Copy any standalone CSS files
          find . -name "*.css" -type f | while read -r file; do
            dir_path=$(dirname "$file")
            mkdir -p "docs/$dir_path"
            cp "$file" "docs/$file"
          done
          echo "# GenPDF Butler Documentation" > docs/index.md
          echo "" >> docs/index.md
          echo "## About" >> docs/index.md
          echo "GenPDF Butler is a package for running chordpro CLI over a folder to generate PDFs from chord charts." >> docs/index.md
          echo "" >> docs/index.md
          echo "## Installation" >> docs/index.md
          echo "\`\`\`bash" >> docs/index.md
          echo "pip install genpdf-butler" >> docs/index.md
          echo "\`\`\`" >> docs/index.md
          echo "" >> docs/index.md
          echo "## Usage" >> docs/index.md
          echo "\`\`\`python" >> docs/index.md
          echo "from genpdf_butler.GenPDF import createPDFs" >> docs/index.md
          echo "" >> docs/index.md
          echo "# Generate PDFs from .chopro files" >> docs/index.md
          echo "createPDFs('/path/to/music', 'a4', 'all')" >> docs/index.md
          echo "\`\`\`" >> docs/index.md
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
